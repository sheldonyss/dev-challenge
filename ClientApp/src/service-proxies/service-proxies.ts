/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.19.1.0 (NJsonSchema v9.10.72.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class NodeServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:58985";
    }

    getEntity(page: number, pageSize: number): Observable<PagedResultOfEdgeNodeDto | null> {
        let url_ = this.baseUrl + "/api/Node/get-entity?";
        if (page === undefined || page === null)
            throw new Error("The parameter 'page' must be defined and cannot be null.");
        else
            url_ += "page=" + encodeURIComponent("" + page) + "&"; 
        if (pageSize === undefined || pageSize === null)
            throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
        else
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEntity(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEntity(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultOfEdgeNodeDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultOfEdgeNodeDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetEntity(response: HttpResponseBase): Observable<PagedResultOfEdgeNodeDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultOfEdgeNodeDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultOfEdgeNodeDto | null>(<any>null);
    }

    getOfficer(page: number, pageSize: number): Observable<PagedResultOfEdgeNodeDto | null> {
        let url_ = this.baseUrl + "/api/Node/get-officer?";
        if (page === undefined || page === null)
            throw new Error("The parameter 'page' must be defined and cannot be null.");
        else
            url_ += "page=" + encodeURIComponent("" + page) + "&"; 
        if (pageSize === undefined || pageSize === null)
            throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
        else
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOfficer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOfficer(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultOfEdgeNodeDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultOfEdgeNodeDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetOfficer(response: HttpResponseBase): Observable<PagedResultOfEdgeNodeDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultOfEdgeNodeDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultOfEdgeNodeDto | null>(<any>null);
    }

    expandNode(nodeId: number): Observable<EdgeNodeDto[] | null> {
        let url_ = this.baseUrl + "/api/Node/expand-node?";
        if (nodeId === undefined || nodeId === null)
            throw new Error("The parameter 'nodeId' must be defined and cannot be null.");
        else
            url_ += "nodeId=" + encodeURIComponent("" + nodeId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExpandNode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExpandNode(<any>response_);
                } catch (e) {
                    return <Observable<EdgeNodeDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<EdgeNodeDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processExpandNode(response: HttpResponseBase): Observable<EdgeNodeDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(EdgeNodeDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EdgeNodeDto[] | null>(<any>null);
    }
}

export class PagedResultOfEdgeNodeDto implements IPagedResultOfEdgeNodeDto {
    totalCount: number;
    page: number;
    items?: EdgeNodeDto[] | undefined;

    constructor(data?: IPagedResultOfEdgeNodeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            this.page = data["page"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(EdgeNodeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfEdgeNodeDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfEdgeNodeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        data["page"] = this.page;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultOfEdgeNodeDto {
    totalCount: number;
    page: number;
    items?: EdgeNodeDto[] | undefined;
}

export class EdgeNodeDto implements IEdgeNodeDto {
    node?: NodeDto | undefined;
    edge?: EdgeDto | undefined;

    constructor(data?: IEdgeNodeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.node = data["node"] ? NodeDto.fromJS(data["node"]) : <any>undefined;
            this.edge = data["edge"] ? EdgeDto.fromJS(data["edge"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EdgeNodeDto {
        data = typeof data === 'object' ? data : {};
        let result = new EdgeNodeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["node"] = this.node ? this.node.toJSON() : <any>undefined;
        data["edge"] = this.edge ? this.edge.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEdgeNodeDto {
    node?: NodeDto | undefined;
    edge?: EdgeDto | undefined;
}

export class NodeDto implements INodeDto {
    id: number;
    nodeType: NodeType;
    nodeTypeStr?: string | undefined;
    label?: string | undefined;
    prop1?: string | undefined;

    constructor(data?: INodeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.nodeType = data["nodeType"];
            this.nodeTypeStr = data["nodeTypeStr"];
            this.label = data["label"];
            this.prop1 = data["prop1"];
        }
    }

    static fromJS(data: any): NodeDto {
        data = typeof data === 'object' ? data : {};
        let result = new NodeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nodeType"] = this.nodeType;
        data["nodeTypeStr"] = this.nodeTypeStr;
        data["label"] = this.label;
        data["prop1"] = this.prop1;
        return data; 
    }
}

export interface INodeDto {
    id: number;
    nodeType: NodeType;
    nodeTypeStr?: string | undefined;
    label?: string | undefined;
    prop1?: string | undefined;
}

export enum NodeType {
    Entity = 0, 
    Address = 1, 
    Officer = 2, 
    Intermediary = 3, 
    Other = 4, 
}

export class EdgeDto implements IEdgeDto {
    id: number;
    from: number;
    type?: string | undefined;
    to: number;
    link?: string | undefined;
    edgeType: EdgeType;
    edgeTypeDesc?: string | undefined;

    constructor(data?: IEdgeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.from = data["from"];
            this.type = data["type"];
            this.to = data["to"];
            this.link = data["link"];
            this.edgeType = data["edgeType"];
            this.edgeTypeDesc = data["edgeTypeDesc"];
        }
    }

    static fromJS(data: any): EdgeDto {
        data = typeof data === 'object' ? data : {};
        let result = new EdgeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["from"] = this.from;
        data["type"] = this.type;
        data["to"] = this.to;
        data["link"] = this.link;
        data["edgeType"] = this.edgeType;
        data["edgeTypeDesc"] = this.edgeTypeDesc;
        return data; 
    }
}

export interface IEdgeDto {
    id: number;
    from: number;
    type?: string | undefined;
    to: number;
    link?: string | undefined;
    edgeType: EdgeType;
    edgeTypeDesc?: string | undefined;
}

export enum EdgeType {
    Connected_to = 0, 
    Intermediary_of = 1, 
    Officer_of = 2, 
    Registered_address = 3, 
    Same_as = 4, 
    Same_id_as = 5, 
    Same_name_as = 6, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}

// D:\github\ParadiseExplorer\ClientApp\nswag\service.extensions.ts